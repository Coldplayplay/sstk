doctype html
html(lang="en")
  head
    title= "ScanNet"
    meta(charset= "UTF-8")
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css')
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap-theme.min.css')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.3/themes/default/style.min.css')
    link(rel='stylesheet', href='//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.min.css')
    link(rel='stylesheet', href='#{baseUrl}/css/common.css')
    link(rel='stylesheet', href='#{baseUrl}/css/search-panel.css')
    link(rel='stylesheet', href='#{baseUrl}/css/model-viewer.css')
  body
    // UI Markup
    #main
      #canvas
      #alert.alert(style="display:none")
        button.close(type="button", onclick="hideAlert()") &times;
        span#alertMessage

      #accordion.overlay.panel-group(style='top:80px; left:10px; max-height:100vh; overflow:auto;')
        .panel.panel-default
          h4.panel-heading.panel-title.collapsed(data-toggle='collapse', data-target='#partsPanel') Parts
          #partsPanel.panel-body.panel-collapse.collapse
            p
              div PGUP/PGDN: slice voxels
              div Shift+PGUP/PGDN: change plane
            p#partTypeSelectDiv
              label(for="partType") Part Type
              select#partType
            p#labelTypeSelectDiv
              label(for="labelType") Label
              select#labelType
            p
              input(type="checkbox", id="keepSegmentColors", checked)
              label(for="keepSegmentColors") Keep segment colors
            p#showSegmentOBBsDiv
              input(type="checkbox", id="showSegmentOBBs")
              label(for="showSegmentOBBs") Show segment OBBs
        .panel.panel-default
          h4.panel-heading.panel-title.collapsed(data-toggle='collapse', data-target='#images') Images
          #images.panel-collapse.collapse
            .panel-body
              #imagesPanel(style='height:450px; width:300px;')

      #instructionsPanel.roundBorder.grayBackground
        span Instructions
        p#instructions
      #namesPanel.overlay.btn-group.btn-group-vertical
        #nameButtonsDiv.btn-group.btn-group-vertical

    script(src="//ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js")
    script(src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js")
    script(src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js")
    script(src="#{baseUrl}/three.js")
    script(src='#{baseUrl}/STK.bundle.js')
    link(rel='stylesheet', href='#{baseUrl}/css/datgui-light.css')
    script.
      STK.Constants.defaultPalette = STK.Colors.palettes['d3_category19p'];
      var canvas = document.getElementById('canvas');
      var modelViewer = new STK.ModelViewer({
        container: canvas,
        sources: ['vf'],
        showSearchOptions: false,
        useNewImages: true,
        partsPanel: {
          partTypes: ['none', 'surfaces', 'voxels-solid', 'voxels-surface', 'voxels-labeled'],
          defaultPartType: 'surfaces',
          defaultLabelType: 'Category'
        }
      });
      modelViewer.Subscribe('Launch', modelViewer, function () {
        // Auto search for models
        modelViewer.partsPanel.setLabelColorIndex('Category', STK.Constants.assetsDir + 'data/scannet/scannet-category-color-index.txt',
          function (index) {
            modelViewer.partsPanel.setLabelColorIndex('voxels-labeled', index);
            modelViewer.partsPanel.labeledVoxels.setLabelColorIndex(index);
            modelViewer.partsPanel.setLabelColorIndex('Label', index);
          }
        );
      });
      var modelId = STK.util.getUrlParam('modelId');
      modelViewer.launch();
      modelViewer.assetManager.registerCustomAssetGroups({
        assetFiles: STK.Constants.scanAssetsFile,
        filterByAssetId: modelId,
        callback: function(err, res) {
          if (!err) {
            if (modelId != undefined) {
              var modelIdParts = modelId.split('.');
              modelViewer.setSourceAndSearch(modelViewer.modelSearchController, modelIdParts[0], 'fullId:' + modelId);
            }
          }
        }
      });

      $('#images').on('shown.bs.collapse', function () {
        modelViewer.modelImagesPanel.onResize();
      });
      $('#instructions').hide();
      $('#instructionsPanel').click(function () {
        $('#instructions').toggle();
      });
      // Make various components draggable
      $('#namesPanel').draggable();
      $('#instructionsPanel').draggable();
      window.app = modelViewer;  // For console debugging
